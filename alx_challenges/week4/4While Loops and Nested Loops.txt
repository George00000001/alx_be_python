Ready to venture beyond fixed iterations? While loops and nested loops introduce more flexibility for controlling program flow in Python. This concept page equips you with while loops, ideal for repetitive tasks based on conditions, and explores the power of nested loops for creating more intricate program logic.

Concept Overview
Topics
While Loops: Master while loops, which execute a block of code repeatedly as long as a specific condition remains True. This is ideal for situations where the number of iterations depends on a condition being met.
Nested Loops:Take your looping skills to the next level with nested loops. Imagine placing one loop inside another!
Learning Objectives:
Learn to use while loops for executing code as long as a condition is true.
Understand how to implement nested loops and when they are useful.
Overview of While Loops
While for loops excel at iterating over a predetermined sequence, what if the number of repetitions depends on a condition? Enter while loops!

While Loop Syntax:
while condition:
    # Code block to be executed as long as the condition is True
condition: This is an expression that evaluates to True or False. The loop continues to execute the code block as long as the condition remains True. Once the condition becomes False, the loop terminates.
Code block: This indented block of code is executed repeatedly for as long as the condition is True.
Key Differences from for Loops:
Iteration Control:

for loops guarantee a fixed number of iterations based on the elements in the sequence being iterated over.
while loops, on the other hand, provide more flexibility for handling an unknown number of iterations. The loop continues to iterate as long as the condition remains True. This can lead to zero iterations if the condition is False from the start.
Predictability: for loops offer predictability as you know exactly how many times the loop will iterate based on the sequence length.

Use Cases:

Choose for loops when you need to process elements in a well-defined sequence a specific number of times (lists, strings, ranges).
Choose while loops when the number of iterations depends on a condition that needs to be evaluated throughout the loop’s execution (user input validation, guessing games, iterating until a specific condition is met).
By understanding these key distinctions, you’ll be able to select the appropriate loop construct ( for or while) to achieve the desired repetitive behavior in your Python programs.

Practical Examples Demonstrating While Loops in Python
While loops offer a powerful tool for repetitive tasks based on conditions. Here are some examples to solidify your understanding:

1. User Input Validation:
age = 0

while age < 18:
  age = int(input("Enter your age (must be 18 or older): "))

print("You are old enough to proceed.")
This program ensures the user enters a valid age (18 or older) before continuing. The while loop keeps prompting the user for input as long as age is less than 18.

2. Guessing Game:
secret_number = 7

guess_count = 0
guess = 0

while guess != secret_number:
  guess_count += 1
  guess = int(input("Guess a number between 1 and 10: "))

print(f"You guessed it in {guess_count} tries!")
This code implements a simple guessing game. The while loop keeps prompting the user for guesses until they guess the correct secret_number. The loop tracks the number of guesses using a counter (guess_count).

3. Iterating Until a Specific Condition:
shopping_list = ["apples", "bread", "milk", "cheese"]
item_found = False

while not item_found:
  item = input("Search for an item in your list (or 'q' to quit): ")
  if item.lower() == "q":
    break  # Exit the loop if user enters 'q'
  if item in shopping_list:
    item_found = True
    print(f"{item} is on your shopping list.")
  else:
    print(f"{item} is not on your list.")
This example demonstrates searching for an item in a list using a while loop. The loop continues iterating until the item_found flag becomes True (item is found) or the user enters ‘q’ to quit.

By mastering these examples, you’ll gain a solid foundation for using while loops to control program flow based on conditions and create interactive Python programs.

Here’s a video on the subject: 

Nested Loops: Power Up Your Loops!
Nested loops, just like the name suggests, involve tucking one loop construct (either for or while) within another. This might sound complex, but it unlocks a powerful technique for iterating through multiple sequences or conditions, allowing you to create more intricate program logic.

Here’s how nested loops can be your allies:

Counting Down from 5 with a Nested While Loop:
outer_count = 5

while outer_count > 0:
  # Outer loop controls the number of times the inner loop runs
  inner_count = 1
  while inner_count <= outer_count:
    # Inner loop repeats for each outer loop iteration
    print(inner_count, end=" ")
    inner_count += 1
  print()  # Move to a new line after each outer loop iteration
  outer_count -= 1
In this example:

The outer while loop controls how many times the inner loop runs. It starts at outer_count = 5 and keeps looping as long as outer_count is greater than 0.
The inner while loop repeats for each iteration of the outer loop. It starts at inner_count = 1 and keeps looping as long as inner_count is less than or equal to the current outer_count value.
Inside the inner loop, we print the current inner_count value and then increment it (inner_count += 1) to move on to the next number.
After each inner loop finishes, the outer loop decreases outer_count by 1, preparing for the next iteration.
Finally, a print() statement outside the inner loop moves the output to a new line after each outer loop completes, creating a countdown effect.

Conquering Multidimensional Data: When you encounter data structures with multiple dimensions, like grids or tables, nested loops become your secret weapon. Imagine an outer loop iterating through rows, while an inner loop tackles elements within each row (or vice versa). This teamwork lets you process complex data structures efficiently.

Example: Printing a Multiplication Table

for i in range(1, 11):
  # Outer loop iterates through rows (multiplication factors)
  for j in range(1, 11):
    # Inner loop iterates through columns (other factors)
    product = i * j
    print(f"{i} x {j} = {product}", end="\t")  # Print with tabs for better formatting
  print()  # Move to a new line after each row
In this example, the outer loop iterates from 1 to 10, representing the multiplication factors in each row. The inner loop, nested within the outer loop, iterates from 1 to 10 again, representing the factors in each column. The product is calculated and printed within the inner loop.

Crafting Creative Patterns: Nested loops can be your artistic partner! Use them to generate geometric patterns or text-based art. By manipulating elements within each loop iteration, you can create fascinating visual or algorithmic patterns.
Example: Printing a Right Triangle of Asterisks

rows = 5

for i in range(1, rows + 1):
  # Outer loop controls the number of rows
  for j in range(1, i + 1):
    # Inner loop prints asterisks for each row
    print("*", end="")
  print()  # Move to a new line after each row of asterisks
Here, the outer loop iterates from 1 to the number of rows (rows). The inner loop, nested within the outer loop, iterates from 1 to the current row number (i). This creates a right triangle pattern of asterisks, where each row has one more asterisk than the previous one.

Here’s a video on the subject: 

Challenge: Nested Loop Art!
Let’s create some text-based art using nested loops! Here’s the idea:

You’ll write a program that uses nested while loops to print a pyramid pattern of asterisks (*).
Steps:
Define the height of the pyramid (number of rows) as a variable, for example: rows = 5.
Use nested while loops to achieve the following:
The outer loop will control the number of rows.
The inner loop will print spaces and then asterisks in each row, creating a triangular shape.
Remember to adjust the number of spaces and asterisks printed within the inner loop based on the current row number to form the pyramid.
Example Output (for rows = 5):

    *
   ***
  *****
 *******
*********